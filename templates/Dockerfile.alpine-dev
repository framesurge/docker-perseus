# Pull alpine as our base image.
FROM alpine:%%ALPINE_OS_VERSION%% AS base

# Work from the root of the container.
WORKDIR /

# Install dependencies in as few build layers as possible.
# TODO: Change urls to replacement strings to be interpolated by scripts.
# TODO: Perform piped actions within scripts to reduce process count.
RUN set eux; \
    printf '%s\n' "Installing: Alpine Packages"; \
    apk update; \
    apk add \
    --no-cache \
    --progress \
    --quiet \
    alpine-sdk=%%ALPINE_PKG_ALPINE_SDK_VERSION%% \
    ca-certificates=%%ALPINE_PKG_CA_CERTIFICATES_VERSION%% \
    gawk=%%ALPINE_PKG_GAWK_VERSION%% \
    gcc=%%ALPINE_PKG_GCC_VERSION%% \
    libstdc++=%%ALPINE_PKG_LIB_STD_CPP_VERSION%% \
    linux-headers=%%ALPINE_PKG_LINUX_HEADERS_VERSION%% \
    make=%%ALPINE_PKG_MAKE_VERSION%% \
    musl-dev=%%ALPINE_PKG_MUSL_DEV_VERSION%% \
    openrc=%%ALPINE_PKG_OPENRC_VERSION%% \
    perl=%%ALPINE_PKG_PERL_VERSION%% \
    pkgconf=%%ALPINE_PKG_PKGCONF_VERSION%% \
    zlib-dev=%%ALPINE_PKG_ZLIB_DEV_VERSION%%; \
    printf '%s\n' "Installing: OpenSSL"; \
    export RUSTUP_HOME="${HOME}/.rustup"; \
    export CARGO_HOME="${HOME}/.cargo"; \
    export PATH="${HOME}/.cargo/bin:${PATH}"; \
    export RUST_VERSION=%%RUST_VERSION%%; \
    export RUSTUP_VERSION=%%RUSTUP_VERSION%%; \
    export RUST_ARCH=%%RUST_ARCH%%; \
    mkdir /openssl-src; \
    export OSSL_V="$( \
        wget -c \
        https://raw.githubusercontent.com/alpinelinux/aports/v%%ALPINE_OS_VERSION%%/main/openssl/APKBUILD -O - \
        | perl -n -e'/^pkgver=(.*)$/ && print $1' \
        | sed 's|\.|\_|g' \
    )"; \
    wget -c \
    "https://github.com/openssl/openssl/archive/OpenSSL_${OSSL_V}.tar.gz" -O - \
    | tar --strip-components=1 -C /openssl-src -xz; \
    cd /openssl-src; \
    CC="gcc -fPIE -pie" ./Configure no-shared no-async \
    --prefix=/usr \
    --openssldir=/usr linux-x86_64; \
    make depend; \
    make -j$(nproc); \
    make install_sw; \
    cd /; \
    rm -rf /openssl-src; \
    printf '%s\n' "Installing: Rust"; \
    curl --progress-bar -Lo rustup-init \
    "https://static.rust-lang.org/rustup/archive/${RUSTUP_VERSION}/${RUST_ARCH}/rustup-init"; \
    echo "$( \
        curl --progress-bar -Lo - \
        https://static.rust-lang.org/rustup/archive/${RUSTUP_VERSION}/${RUST_ARCH}/rustup-init.sha256 \
        | tr -d '\n' \
        | cut -d ' ' -f 1 \
    ) *rustup-init" \
    | sha256sum -c -; \
    chmod +x rustup-init; \
    ./rustup-init -y \
    --no-modify-path \
    --profile minimal \
    --default-toolchain "${RUST_VERSION}" \
    --default-host "${RUST_ARCH}" \
    --target wasm32-unknown-unknown; \
    rm rustup-init; \
    chmod -R a+w "${RUSTUP_HOME}" "${CARGO_HOME}"; \
    rustup --version; \
    cargo --version; \
    rustc --version;

# Build stage dedicated to binaryen that we can run in parallel.
FROM base AS binaryen

# Work from the install path of binaryen.
WORKDIR /binaryen

# Install `binaryen` into the install path.
# TODO: Change urls to replacement strings to be interpolated by scripts.
# TODO: Perform piped actions within scripts to reduce process count.
RUN set -eux; \
    curl --progress-bar -Lo - \
    https://github.com/WebAssembly/binaryen/releases/download/version_%%BINARYEN_VERSION%%/binaryen-version_%%BINARYEN_VERSION%%-x86_64-linux.tar.gz \
    | tar --strip-components=1 -xz;

# Build stage dedicated to bonnie that we can run in parallel.
FROM base AS bonnie

# Work from the install path of bonnie.
WORKDIR /bonnie

# Install `bonnie` into the install path.
RUN set -eux; \
    cargo install bonnie \
    --version %%BONNIE_VERSION%% \
    --target %%RUST_ARCH%%; \
    mv "${HOME}/.cargo/bin/bonnie" "$(pwd)";

# Build stage dedicated to esbuild that we can run in parallel.
FROM base AS esbuild

# Work from the install path of esbuild.
WORKDIR /esbuild

# Install `esbuild` into the install path.
# TODO: Change urls to replacement strings to be interpolated by scripts.
# TODO: Perform piped actions within scripts to reduce process count.
RUN set -eux; \
    curl --progress-bar -Lo - \
    https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-%%ESBUILD_VERSION%%.tgz \
    | tar --strip-components=1 -xz;

# Build stage dedicated to wasm-pack that we can run in parallel.
FROM base AS wasm-pack

# Work from the install path of wasm-pack.
WORKDIR /wasm-pack

# Install `wasm-pack` into the install path.
RUN set -eux; \
    export OPENSSL_DIR=/usr/bin/openssl; \
    export OPENSSL_STATIC=true; \
    export PKG_CONFIG_PATH=/usr/lib/pkgconfig; \
    export PKG_CONFIG_ALLOW_CROSS=1; \
    cargo install wasm-pack \
    --version %%WASM_PACK_VERSION%% \
    --target %%RUST_ARCH%%; \
    mv "${HOME}/.cargo/bin/wasm-pack" "$(pwd)"

# Build stage dedicated to the codebase of the framework we can run in parallel.
FROM base AS codebase

# Work from the root of the codebase.
WORKDIR /perseus

# Download and patch the codebase of perseus.
# TODO: Change urls to replacement strings to be interpolated by scripts.
# TODO: Perform piped actions within scripts to reduce process count.

# FROM codebase AS examples-size-opt
# TODO: Iterate over all examples and implement perseus-size-opt.

# FROM codebase AS examples-wee-alloc
# TODO: Iterate over all examples and implement manual config of wee_alloc.

# FROM codebase AS framework
# TODO: Provide build arguments and env vars.
# TODO: Copy all tools and examples from previous build stages.
# NOTE: This is the final image, the rest is up to the user.